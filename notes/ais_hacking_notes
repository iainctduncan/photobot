Misc AIS hacking note:
https://publiclab.org/notes/ajawitz/06-11-2015/raspberry-pi-as-marine-traffic-radar
http://blog.videgro.net/2015/12/raspberry-pi-automatic-identification-system-ais-receiver/
http://www.catb.org/gpsd/troubleshooting.html

Required hack 2019
Nev had to use the -F optoin and provide a socket file in the GPSD start command to get it going.
IE: gpsd -N -n -F /var/run/gpsd.sock /dev/ttyACM0

NMEA decoding library:
http://nmea.sourceforge.net/

TODO:
- get the aisnet sending data into osx such that we are successfully sniffing NMEA traffic
- figure out how to watch the NMEA messages (manenc)

- try to replicate the same thing with linux
  - this may or not may be possible depending on how much the driver has to do
- on digital yacht's site, there exists a config tool that will configure the 
  aisnet+ adapter from a java app, that can run on linux. But we don't have the +




GPSD:
- linux daemon and tools for receiving data from GPS and AIS machines
  - need to find out if it can work with digital yacht aisnet

DONE
- plugged it into linux mint, and found it using dmesg, as /dev/ttyACM0
- issued the following and could see the messages:
  $ stty -F /dev/ttyACM0 ispeed 34800 && cat < /dev/ttyACM0
  $ stty -F /dev/tty.usbmodem1421 ispeed 34800 && cat < /dev/tty.usbmodem1421
- could see input as ascii messages:
- installed gpsd on linux with apt-get install gpsd gpsd-clients gpsd-dbg
- started it in the foreground with debug output:
  gpsd -D 5 -N -n /dev/ttyACM0
- in another shell, telneted to it and issued watch command
  $telnet localhost 2247
  telnet> ?WATCH={"enable":true,"json":true}

- am now seeing tons of ship output as json messages, nice and easy to parse:
- see file sample_nmea_data.json

- info on clients:
  http://www.catb.org/gpsd/client-howto.html

USE THIS:
python library for consuming from gpsd
https://github.com/wadda/gps3
https://pypi.python.org/pypi/gps3/

Protocal decoding from GPSD:
http://catb.org/gpsd/AIVDM.html#_types_1_2_and_3_position_report_class_a
- "In normal operation, an AIS transceiver will broadcast a position report (type 1, 2, or 3) every 2 to 10 seconds 
  depending on the vesselâ€™s speed while underway, and every 3 minutes while the vessel is at anchor and stationary
  . It will send a type 5 identification every 6 minutes."
- "In practice, message types other than 1, 3, 4, 5, 18, and 24 are unusual or rare; many AIS transmitters never emit them."
  - we have a type 21, aid-to-navigation in our sample, from the safe water beacon at whitby island


Notes on gps client app:
- here's the example we want:
https://github.com/wadda/gps3/blob/master/examples/agegps3.py

DONE:
- created the model with six tables for the four message types

TODO next:
- get the app storing all the messages into the db
- figure out how to filter messages by how close they are to lat and long of photobot
  - we'll put photobot lat and long grid coordinates into a config file and use config parse
    to run it

Filtering by Lat/Lon
- get the lat/lon we're interested in from the ini file
- convert to the weird format for NMEA
- check the messages against this before storing



Trying out gps3.py
- turns out to not do what we want out of the box because it only makes *GPS* packages available





